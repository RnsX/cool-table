import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { MouseEventHandler, useState } from 'react'
import styles from '../styles/Home.module.css'

interface IRow {
  rowNum: number, id: number, name: string, description: string, status: string, comments: string[]
}

interface ITable {
  items: IRow[]
}

const Home: NextPage = () => {

  function getRandomInt(min:number, max:number) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  const [table, setTable] = useState<ITable>({
    items: [
      {rowNum: 1, id: 1, name: 'calculate monthly turnover', description: 'needed for business', status: 'waiting requirements', comments: []},
      {rowNum: 2, id: 2, name: 'calculate credit turnover', description: 'needed for business', status: 'waiting requirements', comments: []},
      {rowNum: 3, id: 3, name: 'calculate debit turnover', description: 'needed for business', status: 'waiting requirements', comments: []},
      {rowNum: 4, id: 4, name: 'calculate deposit turnover', description: 'needed for business', status: 'waiting requirements', comments: []},
    ]
  });

  const [showMenu, setShowMenu] = useState({
    visible: false,
    rowId: 0,
    locationX: 0,
    locationY: 0
  });
  
  const addRow = (addBelow: number) => {
    console.log('insert under', addBelow);
    let current = table.items;
    let newRowNum = addBelow+1;
    let newId = getRandomInt(0,10000);

    current.forEach(row => {
      row.rowNum > addBelow ? row.rowNum++ : row.rowNum = row.rowNum;
    });

    current.push({ rowNum: newRowNum, id: newId, name:'', description:'', status:'new', comments: [] });
    
    current.sort(function(a, b) { 
      return a.rowNum - b.rowNum;
    });

    console.log('sorted array',current);
    setTable({ items: current});
  }

  const showRightClick = (xPos: number, yPos: number, rowId: string, e: React.MouseEvent<HTMLTableRowElement>) => {
    e.preventDefault();
    console.log('pressed right click on', rowId);
    setShowMenu({ visible: true, rowId:  parseInt(rowId), locationX: xPos, locationY: yPos});
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <div className='rightClickMenu'>
          <button onClick={() => {setShowMenu({ visible: false, rowId: 0, locationX: 0, locationY: 0 })}} className='closeButton'>close</button>
          <button id={showMenu.rowId.toString()} onClick={(e: React.MouseEvent<HTMLButtonElement>) => addRow(parseInt(e.currentTarget.id))}>add row</button>
        </div>
        <table className='tableDesign' >
          <tr>
            <th>Id</th>            
            <th>Name</th>            
            <th>Description</th>            
            <th>Status</th>            
            <th>Comments</th>
          </tr>
          {
            table.items.map((x)=> {
              return (
                <tr key={x.id} id={(x.rowNum).toString()}
                  onContextMenu={(e: React.MouseEvent<HTMLTableRowElement>) => showRightClick(e.clientX, e.clientY, e.currentTarget.id, e)}
                >
                  <td>{x.id}</td>
                  <td>{x.name}</td>
                  <td>{x.description}</td>
                  <td>{x.status}</td>
                  <td>
                    <ul>
                      {
                        x.comments.map((y)=>{
                          return <li>{y}</li>
                        })
                      }
                    </ul> 
                  </td>
                </tr>
              )
            })
          }
        </table>
      </div>
      <style jsx>
        {
          `
            .rightClickMenu {
              width: 100px;
              height: 100px;
              border: 1px solid lightgray;
              padding: 0.2em;
              display: ${showMenu.visible == true ? 'flex' : 'none'};
              flex-direction: column;
              justify-content: flex-start;
              position: absolute;
              background-color: white;
              transform: translate(${showMenu.locationX}px, ${showMenu.locationY}px);
              border-radius: 0.5em;
              -webkit-box-shadow: 0px 0px 22px 4px rgba(0,0,0,0.3); 
              box-shadow: 0px 0px 22px 4px rgba(0,0,0,0.3);
            }
            .tableDesign {
              user-select: none;
            }
            .closeButton {
              color: red;
            }
          `
        }
      </style>
    </div>
  )
}

export default Home
